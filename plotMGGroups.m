function plotMGGroups(measure,group,measureStr)
% modular plotting function that takes in group indices and group titles
% and plots them chronologically 
% 
% inputs
% - measure (a nSubs x nConditions matrix of the outcome measure)
% - group (a structure containing...)
% ---  index (e.g. [1 1 1 1 2 2 1 2 2 2])
% ---  title (e.g. {'med first','stim first'}) for each group
% ---  color (e.g. {'r','k'}) where red is for group 1 and black for 2.
% - measureStr (a string that describes the measure, e.g. 'hit rate')
% - auto-loads 'processedDataTable.mat', generated by 'CreateMGTable.m'

%% load data 
try
    load processedDataTable.mat
    %throwing out follow up data
    measure(:,nConds) = [];    
    conditions(nConds) = [];    
catch me
    warning('processed data table missing (run CreateMGTable.m)')
    return
end

%% setting constant data
xInds = [1 2 3 4]; % baseline-meds-stim-both

%% plot data
h = cell(1,nSubs); % figure handles 
for sub = 1:nSubs
    subGr = group.index(sub);           %current subject's group
    subColor = group.color{subGr}./255; %current subject's group color
    
    % plot result for this subject
    h{sub} = plot(xInds,measure(sub,:),'LineWidth',4,'Color',subColor);
    hold on
        
    % set axes
    xlim([0.5 xInds(end)+0.5])
    set(gca,'Xtick',xInds)
    set(gca,'XtickLabel',conditions)
    ylabel(measureStr)
    set(findall(gcf,'-property','FontSize'),'FontSize',20)
end

%% set legend
legendGroup = []; % group of handles to make a legend (e.g. [h{1} h{4}])
uniques = unique(group.index)';
for thisGroup = uniques
    i = find(group.index==thisGroup);     
    legendGroup = [legendGroup h{i(1)}];    
end
leg = legend(legendGroup);
leg.String = group.title;

end